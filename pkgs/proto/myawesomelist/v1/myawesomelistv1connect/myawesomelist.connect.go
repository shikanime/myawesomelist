// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: myawesomelist/v1/myawesomelist.proto

package myawesomelistv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "myawesomelist.shikanime.studio/pkgs/proto/myawesomelist/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AwesomeServiceName is the fully-qualified name of the AwesomeService service.
	AwesomeServiceName = "myawesomelist.v1.AwesomeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AwesomeServiceHealthCheckProcedure is the fully-qualified name of the AwesomeService's
	// HealthCheck RPC.
	AwesomeServiceHealthCheckProcedure = "/myawesomelist.v1.AwesomeService/HealthCheck"
	// AwesomeServiceListCollectionsProcedure is the fully-qualified name of the AwesomeService's
	// ListCollections RPC.
	AwesomeServiceListCollectionsProcedure = "/myawesomelist.v1.AwesomeService/ListCollections"
	// AwesomeServiceGetCollectionProcedure is the fully-qualified name of the AwesomeService's
	// GetCollection RPC.
	AwesomeServiceGetCollectionProcedure = "/myawesomelist.v1.AwesomeService/GetCollection"
	// AwesomeServiceListCategoriesProcedure is the fully-qualified name of the AwesomeService's
	// ListCategories RPC.
	AwesomeServiceListCategoriesProcedure = "/myawesomelist.v1.AwesomeService/ListCategories"
	// AwesomeServiceListProjectsProcedure is the fully-qualified name of the AwesomeService's
	// ListProjects RPC.
	AwesomeServiceListProjectsProcedure = "/myawesomelist.v1.AwesomeService/ListProjects"
	// AwesomeServiceSearchProjectsProcedure is the fully-qualified name of the AwesomeService's
	// SearchProjects RPC.
	AwesomeServiceSearchProjectsProcedure = "/myawesomelist.v1.AwesomeService/SearchProjects"
)

// AwesomeServiceClient is a client for the myawesomelist.v1.AwesomeService service.
type AwesomeServiceClient interface {
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	SearchProjects(context.Context, *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error)
}

// NewAwesomeServiceClient constructs a client for the myawesomelist.v1.AwesomeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAwesomeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AwesomeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	awesomeServiceMethods := v1.File_myawesomelist_v1_myawesomelist_proto.Services().ByName("AwesomeService").Methods()
	return &awesomeServiceClient{
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+AwesomeServiceHealthCheckProcedure,
			connect.WithSchema(awesomeServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
		listCollections: connect.NewClient[v1.ListCollectionsRequest, v1.ListCollectionsResponse](
			httpClient,
			baseURL+AwesomeServiceListCollectionsProcedure,
			connect.WithSchema(awesomeServiceMethods.ByName("ListCollections")),
			connect.WithClientOptions(opts...),
		),
		getCollection: connect.NewClient[v1.GetCollectionRequest, v1.GetCollectionResponse](
			httpClient,
			baseURL+AwesomeServiceGetCollectionProcedure,
			connect.WithSchema(awesomeServiceMethods.ByName("GetCollection")),
			connect.WithClientOptions(opts...),
		),
		listCategories: connect.NewClient[v1.ListCategoriesRequest, v1.ListCategoriesResponse](
			httpClient,
			baseURL+AwesomeServiceListCategoriesProcedure,
			connect.WithSchema(awesomeServiceMethods.ByName("ListCategories")),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+AwesomeServiceListProjectsProcedure,
			connect.WithSchema(awesomeServiceMethods.ByName("ListProjects")),
			connect.WithClientOptions(opts...),
		),
		searchProjects: connect.NewClient[v1.SearchProjectsRequest, v1.SearchProjectsResponse](
			httpClient,
			baseURL+AwesomeServiceSearchProjectsProcedure,
			connect.WithSchema(awesomeServiceMethods.ByName("SearchProjects")),
			connect.WithClientOptions(opts...),
		),
	}
}

// awesomeServiceClient implements AwesomeServiceClient.
type awesomeServiceClient struct {
	healthCheck     *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	listCollections *connect.Client[v1.ListCollectionsRequest, v1.ListCollectionsResponse]
	getCollection   *connect.Client[v1.GetCollectionRequest, v1.GetCollectionResponse]
	listCategories  *connect.Client[v1.ListCategoriesRequest, v1.ListCategoriesResponse]
	listProjects    *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	searchProjects  *connect.Client[v1.SearchProjectsRequest, v1.SearchProjectsResponse]
}

// HealthCheck calls myawesomelist.v1.AwesomeService.HealthCheck.
func (c *awesomeServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// ListCollections calls myawesomelist.v1.AwesomeService.ListCollections.
func (c *awesomeServiceClient) ListCollections(ctx context.Context, req *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return c.listCollections.CallUnary(ctx, req)
}

// GetCollection calls myawesomelist.v1.AwesomeService.GetCollection.
func (c *awesomeServiceClient) GetCollection(ctx context.Context, req *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return c.getCollection.CallUnary(ctx, req)
}

// ListCategories calls myawesomelist.v1.AwesomeService.ListCategories.
func (c *awesomeServiceClient) ListCategories(ctx context.Context, req *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return c.listCategories.CallUnary(ctx, req)
}

// ListProjects calls myawesomelist.v1.AwesomeService.ListProjects.
func (c *awesomeServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// SearchProjects calls myawesomelist.v1.AwesomeService.SearchProjects.
func (c *awesomeServiceClient) SearchProjects(ctx context.Context, req *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error) {
	return c.searchProjects.CallUnary(ctx, req)
}

// AwesomeServiceHandler is an implementation of the myawesomelist.v1.AwesomeService service.
type AwesomeServiceHandler interface {
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	SearchProjects(context.Context, *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error)
}

// NewAwesomeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAwesomeServiceHandler(svc AwesomeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	awesomeServiceMethods := v1.File_myawesomelist_v1_myawesomelist_proto.Services().ByName("AwesomeService").Methods()
	awesomeServiceHealthCheckHandler := connect.NewUnaryHandler(
		AwesomeServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(awesomeServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	awesomeServiceListCollectionsHandler := connect.NewUnaryHandler(
		AwesomeServiceListCollectionsProcedure,
		svc.ListCollections,
		connect.WithSchema(awesomeServiceMethods.ByName("ListCollections")),
		connect.WithHandlerOptions(opts...),
	)
	awesomeServiceGetCollectionHandler := connect.NewUnaryHandler(
		AwesomeServiceGetCollectionProcedure,
		svc.GetCollection,
		connect.WithSchema(awesomeServiceMethods.ByName("GetCollection")),
		connect.WithHandlerOptions(opts...),
	)
	awesomeServiceListCategoriesHandler := connect.NewUnaryHandler(
		AwesomeServiceListCategoriesProcedure,
		svc.ListCategories,
		connect.WithSchema(awesomeServiceMethods.ByName("ListCategories")),
		connect.WithHandlerOptions(opts...),
	)
	awesomeServiceListProjectsHandler := connect.NewUnaryHandler(
		AwesomeServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(awesomeServiceMethods.ByName("ListProjects")),
		connect.WithHandlerOptions(opts...),
	)
	awesomeServiceSearchProjectsHandler := connect.NewUnaryHandler(
		AwesomeServiceSearchProjectsProcedure,
		svc.SearchProjects,
		connect.WithSchema(awesomeServiceMethods.ByName("SearchProjects")),
		connect.WithHandlerOptions(opts...),
	)
	return "/myawesomelist.v1.AwesomeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AwesomeServiceHealthCheckProcedure:
			awesomeServiceHealthCheckHandler.ServeHTTP(w, r)
		case AwesomeServiceListCollectionsProcedure:
			awesomeServiceListCollectionsHandler.ServeHTTP(w, r)
		case AwesomeServiceGetCollectionProcedure:
			awesomeServiceGetCollectionHandler.ServeHTTP(w, r)
		case AwesomeServiceListCategoriesProcedure:
			awesomeServiceListCategoriesHandler.ServeHTTP(w, r)
		case AwesomeServiceListProjectsProcedure:
			awesomeServiceListProjectsHandler.ServeHTTP(w, r)
		case AwesomeServiceSearchProjectsProcedure:
			awesomeServiceSearchProjectsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAwesomeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAwesomeServiceHandler struct{}

func (UnimplementedAwesomeServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myawesomelist.v1.AwesomeService.HealthCheck is not implemented"))
}

func (UnimplementedAwesomeServiceHandler) ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myawesomelist.v1.AwesomeService.ListCollections is not implemented"))
}

func (UnimplementedAwesomeServiceHandler) GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myawesomelist.v1.AwesomeService.GetCollection is not implemented"))
}

func (UnimplementedAwesomeServiceHandler) ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myawesomelist.v1.AwesomeService.ListCategories is not implemented"))
}

func (UnimplementedAwesomeServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myawesomelist.v1.AwesomeService.ListProjects is not implemented"))
}

func (UnimplementedAwesomeServiceHandler) SearchProjects(context.Context, *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myawesomelist.v1.AwesomeService.SearchProjects is not implemented"))
}
