syntax = "proto3";

package myawesomelist.v1;

option go_package = "myawesomelist.shikanime.studio/pkgs/proto/myawesomelist/v1;myawesomelistv1";

// Project represents a single project from an awesome list
message Project {
  string name = 1;
  string description = 2;
  string url = 3;
  optional int64 stargazers_count = 4;
  optional int64 open_issue_count = 5;
}

// Category groups projects under a section
message Category {
  string name = 1;
  repeated Project projects = 2;
}

// Collection represents an awesome repository parsed into categories
message Collection {
  string language = 1;
  repeated Category categories = 2;
}

// Identify a source awesome repository (owner/repo)
message RepoRef {
  string owner = 1;
  string repo = 2;
}

// Requests/Responses

message ListCollectionsRequest {
  bool include_repo_info = 1;
}

message ListCollectionsResponse {
  repeated Collection collections = 1;
}

message GetCollectionRequest {
  RepoRef repo = 1;
  bool include_repo_info = 2;
}

message GetCollectionResponse {
  Collection collection = 1;
}

message ListCategoriesRequest {
  RepoRef repo = 1;
  bool include_repo_info = 2;
}

message ListCategoriesResponse {
  repeated Category categories = 1;
}

message ListProjectsRequest {
  RepoRef repo = 1;
  // Exact category name as parsed from README
  string category_name = 2;
  bool include_repo_info = 3;
}

message ListProjectsResponse {
  repeated Project projects = 1;
}

message SearchProjectsRequest {
  string query = 1;
  int32 limit = 2;
  // Optional filter: restrict search to specific repos
  repeated RepoRef repos = 3;
  bool include_repo_info = 4;
}

message SearchProjectsResponse {
  repeated Project projects = 1;
}

message HealthCheckRequest {}
message HealthCheckResponse {
  string status = 1; // "ok"
}

// Service

service AwesomeService {
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse);
  rpc GetCollection(GetCollectionRequest) returns (GetCollectionResponse);

  rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse);
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse);

  rpc SearchProjects(SearchProjectsRequest) returns (SearchProjectsResponse);
}